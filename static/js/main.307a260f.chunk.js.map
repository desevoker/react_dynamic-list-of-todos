{"version":3,"sources":["types/TodoStatus.ts","api/api.ts","components/Loader/Loader.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoFilter","memo","options","onOptionsChange","status","query","value","onChange","event","currentOptions","target","Object","values","map","todoStatus","type","placeholder","onClick","TodoItem","todo","selectedTodo","onSelect","id","title","completed","isSelected","classNames","TodoList","todos","TodoModal","onClose","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","catch","error","console","log","finally","href","email","name","initialFilterOptions","All","App","setTodos","setSelectedTodo","filterOptions","setFilterOptions","filteredTodos","useMemo","preparedTodos","filter","Active","Completed","Error","toLowerCase","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.307a260f.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo, User } from '../types';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { ChangeEvent, memo } from 'react';\n\nimport { TodoStatus, FilterOptions } from '../../types';\n\ntype Props = {\n  options: FilterOptions;\n  onOptionsChange: React.Dispatch<React.SetStateAction<FilterOptions>>;\n};\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  options,\n  onOptionsChange,\n}) => {\n  const handleSelectChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    onOptionsChange((currentOptions) => ({\n      ...currentOptions,\n      status: event.target.value as TodoStatus,\n    }));\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange((currentOptions) => ({\n      ...currentOptions,\n      query: event.target.value,\n    }));\n  };\n\n  const handleResetClick = () => {\n    onOptionsChange((currentOptions) => ({\n      ...currentOptions,\n      query: '',\n    }));\n  };\n\n  const { status, query } = options;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={status}\n            onChange={handleSelectChange}\n            data-cy=\"statusSelect\"\n            className=\"is-capitalized\"\n          >\n            {Object.values(TodoStatus).map(todoStatus => (\n              <option\n                key={todoStatus}\n                value={todoStatus}\n                className=\"is-capitalized\"\n              >\n                {todoStatus}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          onChange={handleInputChange}\n          type=\"text\"\n          className=\"input\"\n          data-cy=\"searchInput\"\n          placeholder=\"Search...\"\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\">\n          {query && (\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear Search\"\n              data-cy=\"clearSearchButton\"\n              onClick={handleResetClick}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types';\n\ntype Props = {\n  todo: Todo;\n  selectedTodo?: Todo | null;\n  onSelect?: (todo: Todo | null) => void;\n};\n\nexport const TodoItem: React.FC<Props> = memo(({\n  todo,\n  selectedTodo = null,\n  onSelect = () => {},\n}) => {\n  const { id, title, completed } = todo;\n  const isSelected = id === selectedTodo?.id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          data-cy=\"selectButton\"\n          onClick={() => onSelect(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye-slash': isSelected,\n                'fa-eye': !isSelected,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import React, { memo } from 'react';\n\nimport { Todo } from '../../types';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo?: Todo | null;\n  onSelect?: (todo: Todo | null) => void;\n};\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  selectedTodo = null,\n  onSelect = () => {},\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n\n        <th>Title</th>\n\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onSelect={onSelect}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo, User } from '../../types';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onClose: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const { id, title, completed } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Close\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo, TodoStatus, FilterOptions } from './types';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\n\nfunction getFilteredTodos(todos: Todo[], filterOptions: FilterOptions) {\n  const { status, query } = filterOptions;\n  let preparedTodos = [...todos];\n\n  if (status !== TodoStatus.All) {\n    preparedTodos = preparedTodos.filter(({ completed }) => {\n      switch (status) {\n        case TodoStatus.Active:\n          return !completed;\n        case TodoStatus.Completed:\n          return completed;\n        default:\n          throw new Error('This will never happen.');\n      }\n    });\n  }\n\n  if (query) {\n    preparedTodos = preparedTodos.filter(({ title }) => {\n      return title.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n\n  return preparedTodos;\n}\n\nexport const initialFilterOptions: FilterOptions = {\n  status: TodoStatus.All,\n  query: '',\n};\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterOptions, setFilterOptions] = useState(initialFilterOptions);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const filteredTodos = useMemo(\n    () => getFilteredTodos(todos, filterOptions),\n    [todos, filterOptions],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                options={filterOptions}\n                onOptionsChange={setFilterOptions}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  onSelect={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}